# Default values for cw-milvus.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# *****************************
# *** Milvus-related config ***
# *****************************
caiosBucketName: <YOUR_BUCKET_NAME>
caiosAccessKey: <YOUR_ACCESS_KEY>
caiosSecretKey: <YOUR_SECRET_KEY>
# use if a secret with CAIOS keys already exists
existingCaiosSecretName:
# defaults to sanitized chart name
caiosBucketRootPath:
# set to true if you would like to use indexing with GPU
# https://milvus.io/docs/index-with-gpu.md
# this ensures relevant components are scheduled on GPU nodes
gpuIndexing:
# controls whether pods and pvcs for etcd and kafka are removed on uninstall
deleteDependencies: true

# ************************************
# *** Milvus Backup-related config ***
# ************************************
# default to same as Milvus
backupCaiosBucketName:
backupCaiosAccessKey:
backupCaiosSecretKey:
# defaults to "backup"
backupCaiosBucketRootPath:
backupCronExpression: "30 7 * * *"

# ******************************************************
# *** Milvus Backup config, exposed here for clarity ***
# *** Values specific to usage on CKS are called out ***
# ******************************************************
config:
  milvusBackup:
    # Configures the system log output.
    log:
      level: info # Only supports debug, info, warn, error, panic, or fatal. Default 'info'.
      console: true # whether print log to console
      file:
        filename: "logs/backup.log"

    http:
      simpleResponse: true

    # milvus proxy address, compatible to milvus.yaml
    milvus:
      # !!! CKS specific: use cluster DNS name of Milvus service
      address: '{{ include "cw-milvus.address" . }}'
      port: 19530

      # tls mode values [0, 1, 2]
      # 0 is close, 1 is one-way authentication, 2 is mutual authentication
      tlsMode: 0
      # tls cert path for validate server, will be used when tlsMode is 1 or 2
      caCertPath: ""
      serverName: ""
      # mutual tls cert path, for server to validate client.
      # Will be used when tlsMode is 2
      # for backward compatibility, if not set, will use tlsmode 1.
      # WARN: in future version, if user set tlsmode 2, but not set mtlsCertPath, will cause error.
      mtlsCertPath: ""
      mtlsKeyPath: ""

      # Milvus replicate msg channel name, default is by-dev-replicate-msg
      rpcChannelName: "by-dev-replicate-msg"

    # Related configuration of minio, which is responsible for data persistence for Milvus.
    minio:
      # Milvus storage configs, make them the same with milvus config
      # !!! CKS specific: use 'aliyun' to ensure virtual-host-style requests, required by CAIOS
      storageType: "aliyun" # support storage type: local, minio, s3, aws, gcp, ali(aliyun), azure, tc(tencent), gcpnative
      # You can use "gcpnative" for the Google Cloud Platform provider. Uses service account credentials for authentication.
      # !!! CKS specific: the endpoint for CAIOS. Switch to commented block below to use LOTA
      address: cwobject.com # Address of MinIO/S3
      port: 443   # Port of MinIO/S3
      useSSL: true # Access to MinIO/S3 with SSL
      # address: cwlota.com
      # port: 80
      # useSSL: false
      region: ""      # region of MinIO/S3
      accessKeyID: ""  # accessKeyID of MinIO/S3
      secretAccessKey: "" # MinIO/S3 encryption string
      token: ""     # token of MinIO/S3
      gcpCredentialJSON: "/path/to/json-key-file" # The JSON content contains the gcs service account credentials.
      # Used only for the "gcpnative" cloud provider.
      useIAM: false
      iamEndpoint: ""
      bucketName: "{{ .Values.caiosBucketName }}" # Milvus Bucket name in MinIO/S3, make it the same as your milvus instance
      rootPath: '{{ include "cw-milvus.caiosBucketRootPath" . }}' # Milvus storage root path in MinIO/S3, make it the same as your milvus instance

      # Backup storage configs, the storage you want to put the backup data
      # !!! CKS specific: use 'aliyun' to ensure virtual-host-style requests, required by CAIOS
      backupStorageType: "aliyun" # support storage type: local, minio, s3, aws, gcp, ali(aliyun), azure, tc(tencent)
      # !!! CKS specific: the endpoint for CAIOS. Switch to commented block below to use LOTA
      backupAddress: cwobject.com # Address of MinIO/S3
      backupPort: 443   # Port of MinIO/S3
      backupUseSSL: true # Access to MinIO/S3 with SSL
      # backupAddress: cwlota.com
      # backupPort: 80
      # backupUseSSL: false
      backupRegion: ""   # region of MinIO/S3
      backupAccessKeyID: ""  # accessKeyID of MinIO/S3
      backupSecretAccessKey: "" # MinIO/S3 encryption string
      backupToken: ""       # token of MinIO/S3
      backupGcpCredentialJSON: "/path/to/json-key-file" # The JSON content contains the gcs service account credentials.
      # Used only for the "gcpnative" cloud provider.
      backupBucketName: '{{ include "cw-milvus.backupBucketName" . }}' # Bucket name to store backup data. Backup data will store to backupBucketName/backupRootPath
      backupRootPath: '{{ include "cw-milvus.backupBucketRootPath" . }}' # Rootpath to store backup data. Backup data will store to backupBucketName/backupRootPath

      # If you need to back up or restore data between two different storage systems, direct client-side copying is not supported. 
      # Set this option to true to enable data transfer through Milvus Backup.
      # Note: This option will be automatically set to true if `minio.storageType` and `minio.backupStorageType` differ.
      # However, if they are the same but belong to different services, you must manually set this option to `true`.
      crossStorage: "false"
      
    backup:
      maxSegmentGroupSize: 2G

      parallelism:
        # collection level parallelism to backup
        backupCollection: 4
        # thread pool to copy data. reduce it if blocks your storage's network bandwidth
        copydata: 128
        # Collection level parallelism to restore
        restoreCollection: 2
        # max number of import job to run in parallel,
        # should be less than milvus's config dataCoord.import.maxImportJobNum
        importJobNum: 768
      
      # keep temporary files during restore, only use to debug 
      keepTempFiles: false
      
      # Pause GC during backup through Milvus Http API. 
      gcPause:
        enable: true
        # !!! CKS specific: use cluster DNS name of Milvus service
        address: 'http://{{ include "cw-milvus.address" . }}:9091'
